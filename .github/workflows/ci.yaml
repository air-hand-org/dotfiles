name: check

on: # yamllint disable-line rule:truthy
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions: {}

jobs:
  run-install-test:
    permissions: {}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        distro: ["ubuntu", "debian"]
    container:
      image: mcr.microsoft.com/vscode/devcontainers/base:${{ matrix.distro }}
      env:
        CODESPACES: true
        REMOTE_CONTAINERS: true
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
      # install for lint and test
      - uses: ./.github/actions/run-install
      - run: |
          git config --global --add safe.directory "${GITHUB_WORKSPACE}"
      - name: setup
        run: |
          make setup
        shell: bash -leo pipefail {0}
      - name: mise env
        uses: ./.github/actions/mise-hook-env
      - name: lint
        run: |
          make lint
        shell: bash -leo pipefail {0}
      - name: test
        run: |
          make test
        shell: bash -leo pipefail {0}

  run-install-vm:
    permissions: {}
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
      - uses: ./.github/actions/run-install

  super-linter:
    permissions:
      statuses: write
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
        with:
          # for super-linter
          fetch-depth: 0
      - name: load env
        run: |
          grep -v '#' .superlinterenv >> "$GITHUB_ENV"
      - uses: super-linter/super-linter/slim@88ea3923a7e1f89dd485d079f6eb5f5e8f937589 # v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  check-ci-result:
    needs: [run-install-test, run-install-vm, super-linter]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: always()
    steps:
      - name: check results
        run: |
          FAILURE_JOBS=$(echo "${NEEDS_JSON}" | jq -r 'to_entries | map(select(.value.result == "failure")) | map(.key + " " + .value.result) | join("\n")')
          if [ -n "${FAILURE_JOBS}" ]; then
            echo "The following jobs failed: ${FAILURE_JOBS}"
            exit 1
          fi
        env:
          NEEDS_JSON: ${{ toJSON(needs) }}
